{"ast":null,"code":"//resultsHelpers.js\nimport { determineResponseType } from \"./responseTypeHelpers\";\n\n// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ АНАЛИЗА РЕЗУЛЬТАТОВ ПАТТЕРНОВ\n\n// Возвращает статистику по паттерну для подкатегории\nexport function getSubcategoryPatternStats(patternResults, subcategory) {\n  const patternNames = (subcategory.patterns || []).map(p => (p.pattern.ru || p.pattern.en || \"\").trim().toLowerCase());\n  const counts = {};\n  let total = 0;\n  (patternResults || []).forEach(pat => {\n    const patNorm = (pat || \"\").trim().toLowerCase();\n    if (patternNames.includes(patNorm)) {\n      counts[patNorm] = (counts[patNorm] || 0) + 1;\n      total++;\n    }\n  });\n  const stats = {};\n  patternNames.forEach(name => {\n    stats[name] = total > 0 ? Math.round((counts[name] || 0) / total * 100) : 0;\n  });\n  return stats;\n}\n\n// Для гистограммы: собирает проценты по всем паттернам\nexport function getPatternPercentsByCategory(categories, patternResults) {\n  const percents = [];\n  (categories || []).forEach(cat => {\n    (cat.subcategories || []).forEach(subcat => {\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\n      (subcat.patterns || []).forEach(pat => {\n        var _pat$pattern, _pat$pattern2;\n        const name = (((_pat$pattern = pat.pattern) === null || _pat$pattern === void 0 ? void 0 : _pat$pattern.ru) || ((_pat$pattern2 = pat.pattern) === null || _pat$pattern2 === void 0 ? void 0 : _pat$pattern2.en) || \"\").trim();\n        const key = name.toLowerCase();\n        if (stats[key] > 0) {\n          percents.push({\n            name,\n            percent: stats[key]\n          });\n        }\n      });\n    });\n  });\n  return percents;\n}\n\n// Возвращает топ-5 проявленных паттернов\nexport function getTopPatterns({\n  categories,\n  patternResults\n}) {\n  const percents = getPatternPercentsByCategory(categories, patternResults);\n  return percents.sort((a, b) => b.percent - a.percent).slice(0, 5).map(p => p.name);\n}\n\n// Возвращает топовую категорию (где суммарно больше всего проявленность)\nexport function getTopCategory({\n  categories,\n  patternResults\n}) {\n  let maxCategory = \"\";\n  let maxValue = 0;\n  (categories || []).forEach(cat => {\n    let sum = 0;\n    let total = 0;\n    (cat.subcategories || []).forEach(subcat => {\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\n      (subcat.patterns || []).forEach(pat => {\n        var _pat$pattern3, _pat$pattern4;\n        const name = (((_pat$pattern3 = pat.pattern) === null || _pat$pattern3 === void 0 ? void 0 : _pat$pattern3.ru) || ((_pat$pattern4 = pat.pattern) === null || _pat$pattern4 === void 0 ? void 0 : _pat$pattern4.en) || \"\").trim().toLowerCase();\n        sum += stats[name] || 0;\n        total++;\n      });\n    });\n    const avg = total ? sum / total : 0;\n    if (avg > maxValue) {\n      var _cat$title, _cat$title2;\n      maxValue = avg;\n      maxCategory = ((_cat$title = cat.title) === null || _cat$title === void 0 ? void 0 : _cat$title.ru) || ((_cat$title2 = cat.title) === null || _cat$title2 === void 0 ? void 0 : _cat$title2.en) || \"\";\n    }\n  });\n  return maxCategory;\n}\n// Возвращает массив категорий с явно выраженными паттернами\nexport function getStrongPatternsByCategory(categories, patternResults, strongThreshold = 75) {\n  return (categories || []).map(cat => {\n    var _cat$title3, _cat$title4, _cat$description, _cat$description2;\n    const strongPatterns = [];\n    (cat.subcategories || []).forEach(subcat => {\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\n      (subcat.patterns || []).forEach(pat => {\n        var _pat$pattern5, _pat$pattern6;\n        const nameRaw = ((_pat$pattern5 = pat.pattern) === null || _pat$pattern5 === void 0 ? void 0 : _pat$pattern5.ru) || ((_pat$pattern6 = pat.pattern) === null || _pat$pattern6 === void 0 ? void 0 : _pat$pattern6.en) || \"\";\n        const name = nameRaw.trim().toLowerCase();\n        const percent = stats[name] || 0;\n        if (percent >= strongThreshold) {\n          var _pat$pattern7;\n          strongPatterns.push({\n            name: nameRaw,\n            abbr: ((_pat$pattern7 = pat.pattern) === null || _pat$pattern7 === void 0 ? void 0 : _pat$pattern7.abbreviation) || \"\",\n            percent,\n            cssClass: cat.cssClass || \"\"\n          });\n        }\n      });\n    });\n    return {\n      category: ((_cat$title3 = cat.title) === null || _cat$title3 === void 0 ? void 0 : _cat$title3.ru) || ((_cat$title4 = cat.title) === null || _cat$title4 === void 0 ? void 0 : _cat$title4.en),\n      description: ((_cat$description = cat.description) === null || _cat$description === void 0 ? void 0 : _cat$description.ru) || ((_cat$description2 = cat.description) === null || _cat$description2 === void 0 ? void 0 : _cat$description2.en) || \"\",\n      cssClass: cat.cssClass || \"\",\n      strongPatterns\n    };\n  });\n}\n\n// Возвращает топовую категорию по сильным паттернам (совместимо с PatternBarChart)\nexport function getTopCategoryByStrongPatterns(categories, patternResults, strongThreshold = 75) {\n  const strongCategories = getStrongPatternsByCategory(categories, patternResults, strongThreshold).filter(cat => cat.strongPatterns.length > 0);\n  if (strongCategories.length === 0) return null;\n  let maxCount = 0;\n  let topCat = strongCategories[0];\n  strongCategories.forEach(cat => {\n    if (cat.strongPatterns.length > maxCount) {\n      maxCount = cat.strongPatterns.length;\n      topCat = cat;\n    }\n  });\n  return {\n    id: topCat.id,\n    title: topCat.category,\n    titleRu: topCat.titleRu,\n    titleEn: topCat.titleEn\n  };\n}\n// Возвращает текст-интерпретацию (можно доработать под свой текст)\nexport function getPatternMessage({\n  topCategory\n}) {\n  if (topCategory === \"Паттерны времени\") {\n    return \"Вы ориентированы на эффективное управление своим временем и ресурсами.\";\n  }\n  if (topCategory === \"Паттерны поведения\") {\n    return \"Ваши поведенческие стратегии формируют основу вашей активности.\";\n  }\n  if (topCategory === \"Паттерны коммуникации\") {\n    return \"Ваша сильная сторона — коммуникация и взаимодействие с окружающими.\";\n  }\n  if (topCategory === \"Паттерны мышления\") {\n    return \"Ваша особенность — оригинальность мышления и подходов к решению задач.\";\n  }\n  return \"У вас проявлен комплексный профиль паттернов.\";\n}\n\n// Возможности и ограничения — пример (можно расширить)\nexport function getOpportunities({\n  topCategory\n}) {\n  if (topCategory) {\n    return `Ваши сильные стороны проявляются в категории: ${topCategory}. Используйте их для развития!`;\n  }\n  return \"\";\n}\n\n// Модель поведения — пример\nexport function getBehaviorModel({\n  topPatterns\n}) {\n  if (Array.isArray(topPatterns) && topPatterns.length > 0) {\n    return `Ваш стиль поведения базируется на паттернах: ${topPatterns.slice(0, 3).join(\", \")}.`;\n  }\n  return \"\";\n}\n\n// Сильные стороны — пример\nexport function getStrengths({\n  topPatterns\n}) {\n  if (Array.isArray(topPatterns) && topPatterns.length > 0) {\n    return `Ведущие паттерны: ${topPatterns.join(\", \")} — это ваши ресурсы для развития.`;\n  }\n  return \"\";\n}\n\n// Главная сборка всех данных для ResultsScreen\nexport function createResultsData({\n  userData,\n  categories,\n  patternResults\n}) {\n  const topPatterns = getTopPatterns({\n    categories,\n    patternResults\n  });\n  const topCategory = getTopCategoryByStrongPatterns(categories, patternResults); // <-- новая логика!\n  const patternMessage = getPatternMessage({\n    topCategory\n  });\n  const opportunities = getOpportunities({\n    topCategory\n  });\n  const behaviorModel = getBehaviorModel({\n    topPatterns\n  });\n  const strengths = getStrengths({\n    topPatterns\n  });\n  return {\n    userData,\n    categories,\n    patternResults,\n    topPatterns,\n    topCategory,\n    patternMessage,\n    opportunities,\n    behaviorModel,\n    strengths,\n    user: userData,\n    date: new Date().toLocaleDateString(\"ru-RU\")\n  };\n}","map":{"version":3,"names":["determineResponseType","getSubcategoryPatternStats","patternResults","subcategory","patternNames","patterns","map","p","pattern","ru","en","trim","toLowerCase","counts","total","forEach","pat","patNorm","includes","stats","name","Math","round","getPatternPercentsByCategory","categories","percents","cat","subcategories","subcat","_pat$pattern","_pat$pattern2","key","push","percent","getTopPatterns","sort","a","b","slice","getTopCategory","maxCategory","maxValue","sum","_pat$pattern3","_pat$pattern4","avg","_cat$title","_cat$title2","title","getStrongPatternsByCategory","strongThreshold","_cat$title3","_cat$title4","_cat$description","_cat$description2","strongPatterns","_pat$pattern5","_pat$pattern6","nameRaw","_pat$pattern7","abbr","abbreviation","cssClass","category","description","getTopCategoryByStrongPatterns","strongCategories","filter","length","maxCount","topCat","id","titleRu","titleEn","getPatternMessage","topCategory","getOpportunities","getBehaviorModel","topPatterns","Array","isArray","join","getStrengths","createResultsData","userData","patternMessage","opportunities","behaviorModel","strengths","user","date","Date","toLocaleDateString"],"sources":["F:/web/ЗАКАЗЫ/АЙФОРДЖИ/project-pattern-test/project-root/frontend/src/utils/resultsHelpers.js"],"sourcesContent":["//resultsHelpers.js\r\nimport { determineResponseType } from \"./responseTypeHelpers\";\r\n\r\n// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ АНАЛИЗА РЕЗУЛЬТАТОВ ПАТТЕРНОВ\r\n\r\n// Возвращает статистику по паттерну для подкатегории\r\nexport function getSubcategoryPatternStats(patternResults, subcategory) {\r\n\tconst patternNames = (subcategory.patterns || []).map((p) => (p.pattern.ru || p.pattern.en || \"\").trim().toLowerCase());\r\n\tconst counts = {};\r\n\tlet total = 0;\r\n\t(patternResults || []).forEach((pat) => {\r\n\t\tconst patNorm = (pat || \"\").trim().toLowerCase();\r\n\t\tif (patternNames.includes(patNorm)) {\r\n\t\t\tcounts[patNorm] = (counts[patNorm] || 0) + 1;\r\n\t\t\ttotal++;\r\n\t\t}\r\n\t});\r\n\tconst stats = {};\r\n\tpatternNames.forEach((name) => {\r\n\t\tstats[name] = total > 0 ? Math.round(((counts[name] || 0) / total) * 100) : 0;\r\n\t});\r\n\treturn stats;\r\n}\r\n\r\n// Для гистограммы: собирает проценты по всем паттернам\r\nexport function getPatternPercentsByCategory(categories, patternResults) {\r\n\tconst percents = [];\r\n\t(categories || []).forEach((cat) => {\r\n\t\t(cat.subcategories || []).forEach((subcat) => {\r\n\t\t\tconst stats = getSubcategoryPatternStats(patternResults, subcat);\r\n\t\t\t(subcat.patterns || []).forEach((pat) => {\r\n\t\t\t\tconst name = (pat.pattern?.ru || pat.pattern?.en || \"\").trim();\r\n\t\t\t\tconst key = name.toLowerCase();\r\n\t\t\t\tif (stats[key] > 0) {\r\n\t\t\t\t\tpercents.push({ name, percent: stats[key] });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\treturn percents;\r\n}\r\n\r\n// Возвращает топ-5 проявленных паттернов\r\nexport function getTopPatterns({ categories, patternResults }) {\r\n\tconst percents = getPatternPercentsByCategory(categories, patternResults);\r\n\treturn percents\r\n\t\t.sort((a, b) => b.percent - a.percent)\r\n\t\t.slice(0, 5)\r\n\t\t.map((p) => p.name);\r\n}\r\n\r\n// Возвращает топовую категорию (где суммарно больше всего проявленность)\r\nexport function getTopCategory({ categories, patternResults }) {\r\n\tlet maxCategory = \"\";\r\n\tlet maxValue = 0;\r\n\t(categories || []).forEach((cat) => {\r\n\t\tlet sum = 0;\r\n\t\tlet total = 0;\r\n\t\t(cat.subcategories || []).forEach((subcat) => {\r\n\t\t\tconst stats = getSubcategoryPatternStats(patternResults, subcat);\r\n\t\t\t(subcat.patterns || []).forEach((pat) => {\r\n\t\t\t\tconst name = (pat.pattern?.ru || pat.pattern?.en || \"\").trim().toLowerCase();\r\n\t\t\t\tsum += stats[name] || 0;\r\n\t\t\t\ttotal++;\r\n\t\t\t});\r\n\t\t});\r\n\t\tconst avg = total ? sum / total : 0;\r\n\t\tif (avg > maxValue) {\r\n\t\t\tmaxValue = avg;\r\n\t\t\tmaxCategory = cat.title?.ru || cat.title?.en || \"\";\r\n\t\t}\r\n\t});\r\n\treturn maxCategory;\r\n}\r\n// Возвращает массив категорий с явно выраженными паттернами\r\nexport function getStrongPatternsByCategory(categories, patternResults, strongThreshold = 75) {\r\n\treturn (categories || []).map((cat) => {\r\n\t\tconst strongPatterns = [];\r\n\t\t(cat.subcategories || []).forEach((subcat) => {\r\n\t\t\tconst stats = getSubcategoryPatternStats(patternResults, subcat);\r\n\t\t\t(subcat.patterns || []).forEach((pat) => {\r\n\t\t\t\tconst nameRaw = pat.pattern?.ru || pat.pattern?.en || \"\";\r\n\t\t\t\tconst name = nameRaw.trim().toLowerCase();\r\n\t\t\t\tconst percent = stats[name] || 0;\r\n\t\t\t\tif (percent >= strongThreshold) {\r\n\t\t\t\t\tstrongPatterns.push({\r\n\t\t\t\t\t\tname: nameRaw,\r\n\t\t\t\t\t\tabbr: pat.pattern?.abbreviation || \"\",\r\n\t\t\t\t\t\tpercent,\r\n\t\t\t\t\t\tcssClass: cat.cssClass || \"\",\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn {\r\n\t\t\tcategory: cat.title?.ru || cat.title?.en,\r\n\t\t\tdescription: cat.description?.ru || cat.description?.en || \"\",\r\n\t\t\tcssClass: cat.cssClass || \"\",\r\n\t\t\tstrongPatterns,\r\n\t\t};\r\n\t});\r\n}\r\n\r\n// Возвращает топовую категорию по сильным паттернам (совместимо с PatternBarChart)\r\nexport function getTopCategoryByStrongPatterns(categories, patternResults, strongThreshold = 75) {\r\n\tconst strongCategories = getStrongPatternsByCategory(categories, patternResults, strongThreshold).filter((cat) => cat.strongPatterns.length > 0);\r\n\r\n\tif (strongCategories.length === 0) return null;\r\n\r\n\tlet maxCount = 0;\r\n\tlet topCat = strongCategories[0];\r\n\tstrongCategories.forEach((cat) => {\r\n\t\tif (cat.strongPatterns.length > maxCount) {\r\n\t\t\tmaxCount = cat.strongPatterns.length;\r\n\t\t\ttopCat = cat;\r\n\t\t}\r\n\t});\r\n\r\n\treturn {\r\n\t\tid: topCat.id,\r\n\t\ttitle: topCat.category,\r\n\t\ttitleRu: topCat.titleRu,\r\n\t\ttitleEn: topCat.titleEn,\r\n\t};\r\n}\r\n// Возвращает текст-интерпретацию (можно доработать под свой текст)\r\nexport function getPatternMessage({ topCategory }) {\r\n\tif (topCategory === \"Паттерны времени\") {\r\n\t\treturn \"Вы ориентированы на эффективное управление своим временем и ресурсами.\";\r\n\t}\r\n\tif (topCategory === \"Паттерны поведения\") {\r\n\t\treturn \"Ваши поведенческие стратегии формируют основу вашей активности.\";\r\n\t}\r\n\tif (topCategory === \"Паттерны коммуникации\") {\r\n\t\treturn \"Ваша сильная сторона — коммуникация и взаимодействие с окружающими.\";\r\n\t}\r\n\tif (topCategory === \"Паттерны мышления\") {\r\n\t\treturn \"Ваша особенность — оригинальность мышления и подходов к решению задач.\";\r\n\t}\r\n\treturn \"У вас проявлен комплексный профиль паттернов.\";\r\n}\r\n\r\n// Возможности и ограничения — пример (можно расширить)\r\nexport function getOpportunities({ topCategory }) {\r\n\tif (topCategory) {\r\n\t\treturn `Ваши сильные стороны проявляются в категории: ${topCategory}. Используйте их для развития!`;\r\n\t}\r\n\treturn \"\";\r\n}\r\n\r\n// Модель поведения — пример\r\nexport function getBehaviorModel({ topPatterns }) {\r\n\tif (Array.isArray(topPatterns) && topPatterns.length > 0) {\r\n\t\treturn `Ваш стиль поведения базируется на паттернах: ${topPatterns.slice(0, 3).join(\", \")}.`;\r\n\t}\r\n\treturn \"\";\r\n}\r\n\r\n// Сильные стороны — пример\r\nexport function getStrengths({ topPatterns }) {\r\n\tif (Array.isArray(topPatterns) && topPatterns.length > 0) {\r\n\t\treturn `Ведущие паттерны: ${topPatterns.join(\", \")} — это ваши ресурсы для развития.`;\r\n\t}\r\n\treturn \"\";\r\n}\r\n\r\n// Главная сборка всех данных для ResultsScreen\r\nexport function createResultsData({ userData, categories, patternResults }) {\r\n\tconst topPatterns = getTopPatterns({ categories, patternResults });\r\n\tconst topCategory = getTopCategoryByStrongPatterns(categories, patternResults); // <-- новая логика!\r\n\tconst patternMessage = getPatternMessage({ topCategory });\r\n\tconst opportunities = getOpportunities({ topCategory });\r\n\tconst behaviorModel = getBehaviorModel({ topPatterns });\r\n\tconst strengths = getStrengths({ topPatterns });\r\n\r\n\treturn {\r\n\t\tuserData,\r\n\t\tcategories,\r\n\t\tpatternResults,\r\n\t\ttopPatterns,\r\n\t\ttopCategory,\r\n\t\tpatternMessage,\r\n\t\topportunities,\r\n\t\tbehaviorModel,\r\n\t\tstrengths,\r\n\t\tuser: userData,\r\n\t\tdate: new Date().toLocaleDateString(\"ru-RU\"),\r\n\t};\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}