{"ast":null,"code":"//resultsHelpers.js\n// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ АНАЛИЗА РЕЗУЛЬТАТОВ ПАТТЕРНОВ\n// Возвращает статистику по паттерну для подкатегории\nexport function getSubcategoryPatternStats(patternResults,subcategory){const patternNames=(subcategory.patterns||[]).map(p=>(p.pattern.ru||p.pattern.en||\"\").trim().toLowerCase());const counts={};let total=0;(patternResults||[]).forEach(pat=>{const patNorm=(pat||\"\").trim().toLowerCase();if(patternNames.includes(patNorm)){counts[patNorm]=(counts[patNorm]||0)+1;total++;}});const stats={};patternNames.forEach(name=>{stats[name]=total>0?Math.round((counts[name]||0)/total*100):0;});return stats;}// Для гистограммы: собирает проценты по всем паттернам\nexport function getPatternPercentsByCategory(categories,patternResults){const percents=[];(categories||[]).forEach(cat=>{(cat.subcategories||[]).forEach(subcat=>{const stats=getSubcategoryPatternStats(patternResults,subcat);(subcat.patterns||[]).forEach(pat=>{var _pat$pattern,_pat$pattern2;const name=(((_pat$pattern=pat.pattern)===null||_pat$pattern===void 0?void 0:_pat$pattern.ru)||((_pat$pattern2=pat.pattern)===null||_pat$pattern2===void 0?void 0:_pat$pattern2.en)||\"\").trim();const key=name.toLowerCase();if(stats[key]>0){percents.push({name,percent:stats[key]});}});});});return percents;}// Возвращает топ-5 проявленных паттернов\nexport function getTopPatterns(_ref){let{categories,patternResults}=_ref;const percents=getPatternPercentsByCategory(categories,patternResults);return percents.sort((a,b)=>b.percent-a.percent).slice(0,5).map(p=>p.name);}// Возвращает топовую категорию (где суммарно больше всего проявленность)\nexport function getTopCategory(_ref2){let{categories,patternResults}=_ref2;let maxCategory=\"\";let maxValue=0;(categories||[]).forEach(cat=>{let sum=0;let total=0;(cat.subcategories||[]).forEach(subcat=>{const stats=getSubcategoryPatternStats(patternResults,subcat);(subcat.patterns||[]).forEach(pat=>{var _pat$pattern3,_pat$pattern4;const name=(((_pat$pattern3=pat.pattern)===null||_pat$pattern3===void 0?void 0:_pat$pattern3.ru)||((_pat$pattern4=pat.pattern)===null||_pat$pattern4===void 0?void 0:_pat$pattern4.en)||\"\").trim().toLowerCase();sum+=stats[name]||0;total++;});});const avg=total?sum/total:0;if(avg>maxValue){var _cat$title,_cat$title2;maxValue=avg;maxCategory=((_cat$title=cat.title)===null||_cat$title===void 0?void 0:_cat$title.ru)||((_cat$title2=cat.title)===null||_cat$title2===void 0?void 0:_cat$title2.en)||\"\";}});return maxCategory;}// Возвращает текст-интерпретацию (можно доработать под свой текст)\nexport function getPatternMessage(_ref3){let{topCategory}=_ref3;if(topCategory===\"Паттерны времени\"){return\"Вы ориентированы на эффективное управление своим временем и ресурсами.\";}if(topCategory===\"Паттерны поведения\"){return\"Ваши поведенческие стратегии формируют основу вашей активности.\";}if(topCategory===\"Паттерны коммуникации\"){return\"Ваша сильная сторона — коммуникация и взаимодействие с окружающими.\";}if(topCategory===\"Паттерны мышления\"){return\"Ваша особенность — оригинальность мышления и подходов к решению задач.\";}return\"У вас проявлен комплексный профиль паттернов.\";}// Возможности и ограничения — пример (можно расширить)\nexport function getOpportunities(_ref4){let{topCategory}=_ref4;if(topCategory){return`Ваши сильные стороны проявляются в категории: ${topCategory}. Используйте их для развития!`;}return\"\";}// Модель поведения — пример\nexport function getBehaviorModel(_ref5){let{topPatterns}=_ref5;if(Array.isArray(topPatterns)&&topPatterns.length>0){return`Ваш стиль поведения базируется на паттернах: ${topPatterns.slice(0,3).join(\", \")}.`;}return\"\";}// Сильные стороны — пример\nexport function getStrengths(_ref6){let{topPatterns}=_ref6;if(Array.isArray(topPatterns)&&topPatterns.length>0){return`Ведущие паттерны: ${topPatterns.join(\", \")} — это ваши ресурсы для развития.`;}return\"\";}// Главная сборка всех данных для ResultsScreen\nexport function createResultsData(_ref7){let{userData,categories,patternResults}=_ref7;const topPatterns=getTopPatterns({categories,patternResults});const topCategory=getTopCategory({categories,patternResults});const patternMessage=getPatternMessage({topCategory});const opportunities=getOpportunities({topCategory});const behaviorModel=getBehaviorModel({topPatterns});const strengths=getStrengths({topPatterns});return{userData,categories,patternResults,topPatterns,topCategory,patternMessage,opportunities,behaviorModel,strengths,user:userData,date:new Date().toLocaleDateString(\"ru-RU\")};}","map":{"version":3,"names":["getSubcategoryPatternStats","patternResults","subcategory","patternNames","patterns","map","p","pattern","ru","en","trim","toLowerCase","counts","total","forEach","pat","patNorm","includes","stats","name","Math","round","getPatternPercentsByCategory","categories","percents","cat","subcategories","subcat","_pat$pattern","_pat$pattern2","key","push","percent","getTopPatterns","_ref","sort","a","b","slice","getTopCategory","_ref2","maxCategory","maxValue","sum","_pat$pattern3","_pat$pattern4","avg","_cat$title","_cat$title2","title","getPatternMessage","_ref3","topCategory","getOpportunities","_ref4","getBehaviorModel","_ref5","topPatterns","Array","isArray","length","join","getStrengths","_ref6","createResultsData","_ref7","userData","patternMessage","opportunities","behaviorModel","strengths","user","date","Date","toLocaleDateString"],"sources":["F:/web/ЗАКАЗЫ/АЙФОРДЖИ/project-pattern-test/project-root/frontend/src/utils/resultsHelpers.js"],"sourcesContent":["//resultsHelpers.js\r\n\r\n// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ АНАЛИЗА РЕЗУЛЬТАТОВ ПАТТЕРНОВ\r\n\r\n// Возвращает статистику по паттерну для подкатегории\r\nexport function getSubcategoryPatternStats(patternResults, subcategory) {\r\n  const patternNames = (subcategory.patterns || []).map((p) => (p.pattern.ru || p.pattern.en || \"\").trim().toLowerCase());\r\n  const counts = {};\r\n  let total = 0;\r\n  (patternResults || []).forEach((pat) => {\r\n    const patNorm = (pat || \"\").trim().toLowerCase();\r\n    if (patternNames.includes(patNorm)) {\r\n      counts[patNorm] = (counts[patNorm] || 0) + 1;\r\n      total++;\r\n    }\r\n  });\r\n  const stats = {};\r\n  patternNames.forEach((name) => {\r\n    stats[name] = total > 0 ? Math.round(((counts[name] || 0) / total) * 100) : 0;\r\n  });\r\n  return stats;\r\n}\r\n\r\n// Для гистограммы: собирает проценты по всем паттернам\r\nexport function getPatternPercentsByCategory(categories, patternResults) {\r\n  const percents = [];\r\n  (categories || []).forEach((cat) => {\r\n    (cat.subcategories || []).forEach((subcat) => {\r\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\r\n      (subcat.patterns || []).forEach((pat) => {\r\n        const name = (pat.pattern?.ru || pat.pattern?.en || \"\").trim();\r\n        const key = name.toLowerCase();\r\n        if (stats[key] > 0) {\r\n          percents.push({ name, percent: stats[key] });\r\n        }\r\n      });\r\n    });\r\n  });\r\n  return percents;\r\n}\r\n\r\n// Возвращает топ-5 проявленных паттернов\r\nexport function getTopPatterns({ categories, patternResults }) {\r\n  const percents = getPatternPercentsByCategory(categories, patternResults);\r\n  return percents\r\n    .sort((a, b) => b.percent - a.percent)\r\n    .slice(0, 5)\r\n    .map((p) => p.name);\r\n}\r\n\r\n// Возвращает топовую категорию (где суммарно больше всего проявленность)\r\nexport function getTopCategory({ categories, patternResults }) {\r\n  let maxCategory = \"\";\r\n  let maxValue = 0;\r\n  (categories || []).forEach((cat) => {\r\n    let sum = 0;\r\n    let total = 0;\r\n    (cat.subcategories || []).forEach((subcat) => {\r\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\r\n      (subcat.patterns || []).forEach((pat) => {\r\n        const name = (pat.pattern?.ru || pat.pattern?.en || \"\").trim().toLowerCase();\r\n        sum += stats[name] || 0;\r\n        total++;\r\n      });\r\n    });\r\n    const avg = total ? sum / total : 0;\r\n    if (avg > maxValue) {\r\n      maxValue = avg;\r\n      maxCategory = cat.title?.ru || cat.title?.en || \"\";\r\n    }\r\n  });\r\n  return maxCategory;\r\n}\r\n\r\n// Возвращает текст-интерпретацию (можно доработать под свой текст)\r\nexport function getPatternMessage({ topCategory }) {\r\n  if (topCategory === \"Паттерны времени\") {\r\n    return \"Вы ориентированы на эффективное управление своим временем и ресурсами.\";\r\n  }\r\n  if (topCategory === \"Паттерны поведения\") {\r\n    return \"Ваши поведенческие стратегии формируют основу вашей активности.\";\r\n  }\r\n  if (topCategory === \"Паттерны коммуникации\") {\r\n    return \"Ваша сильная сторона — коммуникация и взаимодействие с окружающими.\";\r\n  }\r\n  if (topCategory === \"Паттерны мышления\") {\r\n    return \"Ваша особенность — оригинальность мышления и подходов к решению задач.\";\r\n  }\r\n  return \"У вас проявлен комплексный профиль паттернов.\";\r\n}\r\n\r\n// Возможности и ограничения — пример (можно расширить)\r\nexport function getOpportunities({ topCategory }) {\r\n  if (topCategory) {\r\n    return `Ваши сильные стороны проявляются в категории: ${topCategory}. Используйте их для развития!`;\r\n  }\r\n  return \"\";\r\n}\r\n\r\n// Модель поведения — пример\r\nexport function getBehaviorModel({ topPatterns }) {\r\n  if (Array.isArray(topPatterns) && topPatterns.length > 0) {\r\n    return `Ваш стиль поведения базируется на паттернах: ${topPatterns.slice(0, 3).join(\", \")}.`;\r\n  }\r\n  return \"\";\r\n}\r\n\r\n// Сильные стороны — пример\r\nexport function getStrengths({ topPatterns }) {\r\n  if (Array.isArray(topPatterns) && topPatterns.length > 0) {\r\n    return `Ведущие паттерны: ${topPatterns.join(\", \")} — это ваши ресурсы для развития.`;\r\n  }\r\n  return \"\";\r\n}\r\n\r\n// Главная сборка всех данных для ResultsScreen\r\nexport function createResultsData({ userData, categories, patternResults }) {\r\n  const topPatterns = getTopPatterns({ categories, patternResults });\r\n  const topCategory = getTopCategory({ categories, patternResults });\r\n  const patternMessage = getPatternMessage({ topCategory });\r\n  const opportunities = getOpportunities({ topCategory });\r\n  const behaviorModel = getBehaviorModel({ topPatterns });\r\n  const strengths = getStrengths({ topPatterns });\r\n\r\n  return {\r\n    userData,\r\n    categories,\r\n    patternResults,\r\n    topPatterns,\r\n    topCategory,\r\n    patternMessage,\r\n    opportunities,\r\n    behaviorModel,\r\n    strengths,\r\n    user: userData,\r\n    date: new Date().toLocaleDateString(\"ru-RU\"),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}