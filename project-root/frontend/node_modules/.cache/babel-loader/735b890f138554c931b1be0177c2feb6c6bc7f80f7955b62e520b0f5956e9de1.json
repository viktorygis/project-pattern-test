{"ast":null,"code":"import { DIRECTION } from '../core/utils.js';\nimport ActionDetails from '../core/action-details.js';\nimport createMask, { maskedClass } from '../masked/factory.js';\nimport MaskElement from './mask-element.js';\nimport HTMLInputMaskElement from './html-input-mask-element.js';\nimport HTMLContenteditableMaskElement from './html-contenteditable-mask-element.js';\nimport IMask from '../core/holder.js';\nimport InputHistory from './input-history.js';\nimport './html-mask-element.js';\n\n/** Listens to element events and controls changes between element and {@link Masked} */\nclass InputMask {\n  /**\n    View element\n  */\n\n  /** Internal {@link Masked} model */\n\n  constructor(el, opts) {\n    this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLInputMaskElement(el);\n    this.masked = createMask(opts);\n    this._listeners = {};\n    this._value = '';\n    this._unmaskedValue = '';\n    this._rawInputValue = '';\n    this.history = new InputHistory();\n    this._saveSelection = this._saveSelection.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onDrop = this._onDrop.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onClick = this._onClick.bind(this);\n    this._onUndo = this._onUndo.bind(this);\n    this._onRedo = this._onRedo.bind(this);\n    this.alignCursor = this.alignCursor.bind(this);\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n    this._bindEvents();\n\n    // refresh\n    this.updateValue();\n    this._onChange();\n  }\n  maskEquals(mask) {\n    var _this$masked;\n    return mask == null || ((_this$masked = this.masked) == null ? void 0 : _this$masked.maskEquals(mask));\n  }\n\n  /** Masked */\n  get mask() {\n    return this.masked.mask;\n  }\n  set mask(mask) {\n    if (this.maskEquals(mask)) return;\n    if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {\n      // TODO \"any\" no idea\n      this.masked.updateOptions({\n        mask\n      });\n      return;\n    }\n    const masked = mask instanceof IMask.Masked ? mask : createMask({\n      mask\n    });\n    masked.unmaskedValue = this.masked.unmaskedValue;\n    this.masked = masked;\n  }\n\n  /** Raw value */\n  get value() {\n    return this._value;\n  }\n  set value(str) {\n    if (this.value === str) return;\n    this.masked.value = str;\n    this.updateControl('auto');\n  }\n\n  /** Unmasked value */\n  get unmaskedValue() {\n    return this._unmaskedValue;\n  }\n  set unmaskedValue(str) {\n    if (this.unmaskedValue === str) return;\n    this.masked.unmaskedValue = str;\n    this.updateControl('auto');\n  }\n\n  /** Raw input value */\n  get rawInputValue() {\n    return this._rawInputValue;\n  }\n  set rawInputValue(str) {\n    if (this.rawInputValue === str) return;\n    this.masked.rawInputValue = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Typed unmasked value */\n  get typedValue() {\n    return this.masked.typedValue;\n  }\n  set typedValue(val) {\n    if (this.masked.typedValueEquals(val)) return;\n    this.masked.typedValue = val;\n    this.updateControl('auto');\n  }\n\n  /** Display value */\n  get displayValue() {\n    return this.masked.displayValue;\n  }\n\n  /** Starts listening to element events */\n  _bindEvents() {\n    this.el.bindEvents({\n      selectionChange: this._saveSelection,\n      input: this._onInput,\n      drop: this._onDrop,\n      click: this._onClick,\n      focus: this._onFocus,\n      commit: this._onChange,\n      undo: this._onUndo,\n      redo: this._onRedo\n    });\n  }\n\n  /** Stops listening to element events */\n  _unbindEvents() {\n    if (this.el) this.el.unbindEvents();\n  }\n\n  /** Fires custom event */\n  _fireEvent(ev, e) {\n    const listeners = this._listeners[ev];\n    if (!listeners) return;\n    listeners.forEach(l => l(e));\n  }\n\n  /** Current selection start */\n  get selectionStart() {\n    return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n  }\n\n  /** Current cursor position */\n  get cursorPos() {\n    return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n  }\n  set cursorPos(pos) {\n    if (!this.el || !this.el.isActive) return;\n    this.el.select(pos, pos);\n    this._saveSelection();\n  }\n\n  /** Stores current selection */\n  _saveSelection(/* ev */\n  ) {\n    if (this.displayValue !== this.el.value) {\n      console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n    }\n    this._selection = {\n      start: this.selectionStart,\n      end: this.cursorPos\n    };\n  }\n\n  /** Syncronizes model value from view */\n  updateValue() {\n    this.masked.value = this.el.value;\n    this._value = this.masked.value;\n    this._unmaskedValue = this.masked.unmaskedValue;\n    this._rawInputValue = this.masked.rawInputValue;\n  }\n\n  /** Syncronizes view from model value, fires change events */\n  updateControl(cursorPos) {\n    const newUnmaskedValue = this.masked.unmaskedValue;\n    const newValue = this.masked.value;\n    const newRawInputValue = this.masked.rawInputValue;\n    const newDisplayValue = this.displayValue;\n    const isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue || this._rawInputValue !== newRawInputValue;\n    this._unmaskedValue = newUnmaskedValue;\n    this._value = newValue;\n    this._rawInputValue = newRawInputValue;\n    if (this.el.value !== newDisplayValue) this.el.value = newDisplayValue;\n    if (cursorPos === 'auto') this.alignCursor();else if (cursorPos != null) this.cursorPos = cursorPos;\n    if (isChanged) this._fireChangeEvents();\n    if (!this._historyChanging && (isChanged || this.history.isEmpty)) this.history.push({\n      unmaskedValue: newUnmaskedValue,\n      selection: {\n        start: this.selectionStart,\n        end: this.cursorPos\n      }\n    });\n  }\n\n  /** Updates options with deep equal check, recreates {@link Masked} model if mask type changes */\n  updateOptions(opts) {\n    const {\n      mask,\n      ...restOpts\n    } = opts; // TODO types, yes, mask is optional\n\n    const updateMask = !this.maskEquals(mask);\n    const updateOpts = this.masked.optionsIsChanged(restOpts);\n    if (updateMask) this.mask = mask;\n    if (updateOpts) this.masked.updateOptions(restOpts); // TODO\n\n    if (updateMask || updateOpts) this.updateControl();\n  }\n\n  /** Updates cursor */\n  updateCursor(cursorPos) {\n    if (cursorPos == null) return;\n    this.cursorPos = cursorPos;\n\n    // also queue change cursor for mobile browsers\n    this._delayUpdateCursor(cursorPos);\n  }\n\n  /** Delays cursor update to support mobile browsers */\n  _delayUpdateCursor(cursorPos) {\n    this._abortUpdateCursor();\n    this._changingCursorPos = cursorPos;\n    this._cursorChanging = setTimeout(() => {\n      if (!this.el) return; // if was destroyed\n      this.cursorPos = this._changingCursorPos;\n      this._abortUpdateCursor();\n    }, 10);\n  }\n\n  /** Fires custom events */\n  _fireChangeEvents() {\n    this._fireEvent('accept', this._inputEvent);\n    if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\n  }\n\n  /** Aborts delayed cursor update */\n  _abortUpdateCursor() {\n    if (this._cursorChanging) {\n      clearTimeout(this._cursorChanging);\n      delete this._cursorChanging;\n    }\n  }\n\n  /** Aligns cursor to nearest available position */\n  alignCursor() {\n    this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));\n  }\n\n  /** Aligns cursor only if selection is empty */\n  alignCursorFriendly() {\n    if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\n    this.alignCursor();\n  }\n\n  /** Adds listener on custom event */\n  on(ev, handler) {\n    if (!this._listeners[ev]) this._listeners[ev] = [];\n    this._listeners[ev].push(handler);\n    return this;\n  }\n\n  /** Removes custom event listener */\n  off(ev, handler) {\n    if (!this._listeners[ev]) return this;\n    if (!handler) {\n      delete this._listeners[ev];\n      return this;\n    }\n    const hIndex = this._listeners[ev].indexOf(handler);\n    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n    return this;\n  }\n\n  /** Handles view input event */\n  _onInput(e) {\n    this._inputEvent = e;\n    this._abortUpdateCursor();\n    const details = new ActionDetails({\n      // new state\n      value: this.el.value,\n      cursorPos: this.cursorPos,\n      // old state\n      oldValue: this.displayValue,\n      oldSelection: this._selection\n    });\n    const oldRawValue = this.masked.rawInputValue;\n    const offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection, {\n      input: true,\n      raw: true\n    }).offset;\n\n    // force align in remove direction only if no input chars were removed\n    // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n    const removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;\n    let cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\n    if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);\n    this.updateControl(cursorPos);\n    delete this._inputEvent;\n  }\n\n  /** Handles view change event and commits model value */\n  _onChange() {\n    if (this.displayValue !== this.el.value) this.updateValue();\n    this.masked.doCommit();\n    this.updateControl();\n    this._saveSelection();\n  }\n\n  /** Handles view drop event, prevents by default */\n  _onDrop(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  /** Restore last selection on focus */\n  _onFocus(ev) {\n    this.alignCursorFriendly();\n  }\n\n  /** Restore last selection on focus */\n  _onClick(ev) {\n    this.alignCursorFriendly();\n  }\n  _onUndo() {\n    this._applyHistoryState(this.history.undo());\n  }\n  _onRedo() {\n    this._applyHistoryState(this.history.redo());\n  }\n  _applyHistoryState(state) {\n    if (!state) return;\n    this._historyChanging = true;\n    this.unmaskedValue = state.unmaskedValue;\n    this.el.select(state.selection.start, state.selection.end);\n    this._saveSelection();\n    this._historyChanging = false;\n  }\n\n  /** Unbind view events and removes element reference */\n  destroy() {\n    this._unbindEvents();\n    this._listeners.length = 0;\n    delete this.el;\n  }\n}\nIMask.InputMask = InputMask;\nexport { InputMask as default };","map":{"version":3,"names":["DIRECTION","ActionDetails","createMask","maskedClass","MaskElement","HTMLInputMaskElement","HTMLContenteditableMaskElement","IMask","InputHistory","InputMask","constructor","el","opts","isContentEditable","tagName","masked","_listeners","_value","_unmaskedValue","_rawInputValue","history","_saveSelection","bind","_onInput","_onChange","_onDrop","_onFocus","_onClick","_onUndo","_onRedo","alignCursor","alignCursorFriendly","_bindEvents","updateValue","maskEquals","mask","_this$masked","Masked","updateOptions","unmaskedValue","value","str","updateControl","rawInputValue","typedValue","val","typedValueEquals","displayValue","bindEvents","selectionChange","input","drop","click","focus","commit","undo","redo","_unbindEvents","unbindEvents","_fireEvent","ev","e","listeners","forEach","l","selectionStart","_cursorChanging","_changingCursorPos","cursorPos","selectionEnd","pos","isActive","select","console","warn","_selection","start","end","newUnmaskedValue","newValue","newRawInputValue","newDisplayValue","isChanged","_fireChangeEvents","_historyChanging","isEmpty","push","selection","restOpts","updateMask","updateOpts","optionsIsChanged","updateCursor","_delayUpdateCursor","_abortUpdateCursor","setTimeout","_inputEvent","isComplete","clearTimeout","nearestInputPos","LEFT","on","handler","off","hIndex","indexOf","splice","details","oldValue","oldSelection","oldRawValue","offset","startChangePos","removed","length","inserted","removeDirection","raw","NONE","doCommit","preventDefault","stopPropagation","_applyHistoryState","state","destroy","default"],"sources":["F:/web/ЗАКАЗЫ/АЙФОРДЖИ/project-pattern-test/project-root/frontend/node_modules/imask/esm/controls/input.js"],"sourcesContent":["import { DIRECTION } from '../core/utils.js';\nimport ActionDetails from '../core/action-details.js';\nimport createMask, { maskedClass } from '../masked/factory.js';\nimport MaskElement from './mask-element.js';\nimport HTMLInputMaskElement from './html-input-mask-element.js';\nimport HTMLContenteditableMaskElement from './html-contenteditable-mask-element.js';\nimport IMask from '../core/holder.js';\nimport InputHistory from './input-history.js';\nimport './html-mask-element.js';\n\n/** Listens to element events and controls changes between element and {@link Masked} */\nclass InputMask {\n  /**\n    View element\n  */\n\n  /** Internal {@link Masked} model */\n\n  constructor(el, opts) {\n    this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLInputMaskElement(el);\n    this.masked = createMask(opts);\n    this._listeners = {};\n    this._value = '';\n    this._unmaskedValue = '';\n    this._rawInputValue = '';\n    this.history = new InputHistory();\n    this._saveSelection = this._saveSelection.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onDrop = this._onDrop.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onClick = this._onClick.bind(this);\n    this._onUndo = this._onUndo.bind(this);\n    this._onRedo = this._onRedo.bind(this);\n    this.alignCursor = this.alignCursor.bind(this);\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n    this._bindEvents();\n\n    // refresh\n    this.updateValue();\n    this._onChange();\n  }\n  maskEquals(mask) {\n    var _this$masked;\n    return mask == null || ((_this$masked = this.masked) == null ? void 0 : _this$masked.maskEquals(mask));\n  }\n\n  /** Masked */\n  get mask() {\n    return this.masked.mask;\n  }\n  set mask(mask) {\n    if (this.maskEquals(mask)) return;\n    if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {\n      // TODO \"any\" no idea\n      this.masked.updateOptions({\n        mask\n      });\n      return;\n    }\n    const masked = mask instanceof IMask.Masked ? mask : createMask({\n      mask\n    });\n    masked.unmaskedValue = this.masked.unmaskedValue;\n    this.masked = masked;\n  }\n\n  /** Raw value */\n  get value() {\n    return this._value;\n  }\n  set value(str) {\n    if (this.value === str) return;\n    this.masked.value = str;\n    this.updateControl('auto');\n  }\n\n  /** Unmasked value */\n  get unmaskedValue() {\n    return this._unmaskedValue;\n  }\n  set unmaskedValue(str) {\n    if (this.unmaskedValue === str) return;\n    this.masked.unmaskedValue = str;\n    this.updateControl('auto');\n  }\n\n  /** Raw input value */\n  get rawInputValue() {\n    return this._rawInputValue;\n  }\n  set rawInputValue(str) {\n    if (this.rawInputValue === str) return;\n    this.masked.rawInputValue = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Typed unmasked value */\n  get typedValue() {\n    return this.masked.typedValue;\n  }\n  set typedValue(val) {\n    if (this.masked.typedValueEquals(val)) return;\n    this.masked.typedValue = val;\n    this.updateControl('auto');\n  }\n\n  /** Display value */\n  get displayValue() {\n    return this.masked.displayValue;\n  }\n\n  /** Starts listening to element events */\n  _bindEvents() {\n    this.el.bindEvents({\n      selectionChange: this._saveSelection,\n      input: this._onInput,\n      drop: this._onDrop,\n      click: this._onClick,\n      focus: this._onFocus,\n      commit: this._onChange,\n      undo: this._onUndo,\n      redo: this._onRedo\n    });\n  }\n\n  /** Stops listening to element events */\n  _unbindEvents() {\n    if (this.el) this.el.unbindEvents();\n  }\n\n  /** Fires custom event */\n  _fireEvent(ev, e) {\n    const listeners = this._listeners[ev];\n    if (!listeners) return;\n    listeners.forEach(l => l(e));\n  }\n\n  /** Current selection start */\n  get selectionStart() {\n    return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n  }\n\n  /** Current cursor position */\n  get cursorPos() {\n    return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n  }\n  set cursorPos(pos) {\n    if (!this.el || !this.el.isActive) return;\n    this.el.select(pos, pos);\n    this._saveSelection();\n  }\n\n  /** Stores current selection */\n  _saveSelection( /* ev */\n  ) {\n    if (this.displayValue !== this.el.value) {\n      console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n    }\n    this._selection = {\n      start: this.selectionStart,\n      end: this.cursorPos\n    };\n  }\n\n  /** Syncronizes model value from view */\n  updateValue() {\n    this.masked.value = this.el.value;\n    this._value = this.masked.value;\n    this._unmaskedValue = this.masked.unmaskedValue;\n    this._rawInputValue = this.masked.rawInputValue;\n  }\n\n  /** Syncronizes view from model value, fires change events */\n  updateControl(cursorPos) {\n    const newUnmaskedValue = this.masked.unmaskedValue;\n    const newValue = this.masked.value;\n    const newRawInputValue = this.masked.rawInputValue;\n    const newDisplayValue = this.displayValue;\n    const isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue || this._rawInputValue !== newRawInputValue;\n    this._unmaskedValue = newUnmaskedValue;\n    this._value = newValue;\n    this._rawInputValue = newRawInputValue;\n    if (this.el.value !== newDisplayValue) this.el.value = newDisplayValue;\n    if (cursorPos === 'auto') this.alignCursor();else if (cursorPos != null) this.cursorPos = cursorPos;\n    if (isChanged) this._fireChangeEvents();\n    if (!this._historyChanging && (isChanged || this.history.isEmpty)) this.history.push({\n      unmaskedValue: newUnmaskedValue,\n      selection: {\n        start: this.selectionStart,\n        end: this.cursorPos\n      }\n    });\n  }\n\n  /** Updates options with deep equal check, recreates {@link Masked} model if mask type changes */\n  updateOptions(opts) {\n    const {\n      mask,\n      ...restOpts\n    } = opts; // TODO types, yes, mask is optional\n\n    const updateMask = !this.maskEquals(mask);\n    const updateOpts = this.masked.optionsIsChanged(restOpts);\n    if (updateMask) this.mask = mask;\n    if (updateOpts) this.masked.updateOptions(restOpts); // TODO\n\n    if (updateMask || updateOpts) this.updateControl();\n  }\n\n  /** Updates cursor */\n  updateCursor(cursorPos) {\n    if (cursorPos == null) return;\n    this.cursorPos = cursorPos;\n\n    // also queue change cursor for mobile browsers\n    this._delayUpdateCursor(cursorPos);\n  }\n\n  /** Delays cursor update to support mobile browsers */\n  _delayUpdateCursor(cursorPos) {\n    this._abortUpdateCursor();\n    this._changingCursorPos = cursorPos;\n    this._cursorChanging = setTimeout(() => {\n      if (!this.el) return; // if was destroyed\n      this.cursorPos = this._changingCursorPos;\n      this._abortUpdateCursor();\n    }, 10);\n  }\n\n  /** Fires custom events */\n  _fireChangeEvents() {\n    this._fireEvent('accept', this._inputEvent);\n    if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\n  }\n\n  /** Aborts delayed cursor update */\n  _abortUpdateCursor() {\n    if (this._cursorChanging) {\n      clearTimeout(this._cursorChanging);\n      delete this._cursorChanging;\n    }\n  }\n\n  /** Aligns cursor to nearest available position */\n  alignCursor() {\n    this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));\n  }\n\n  /** Aligns cursor only if selection is empty */\n  alignCursorFriendly() {\n    if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\n    this.alignCursor();\n  }\n\n  /** Adds listener on custom event */\n  on(ev, handler) {\n    if (!this._listeners[ev]) this._listeners[ev] = [];\n    this._listeners[ev].push(handler);\n    return this;\n  }\n\n  /** Removes custom event listener */\n  off(ev, handler) {\n    if (!this._listeners[ev]) return this;\n    if (!handler) {\n      delete this._listeners[ev];\n      return this;\n    }\n    const hIndex = this._listeners[ev].indexOf(handler);\n    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n    return this;\n  }\n\n  /** Handles view input event */\n  _onInput(e) {\n    this._inputEvent = e;\n    this._abortUpdateCursor();\n    const details = new ActionDetails({\n      // new state\n      value: this.el.value,\n      cursorPos: this.cursorPos,\n      // old state\n      oldValue: this.displayValue,\n      oldSelection: this._selection\n    });\n    const oldRawValue = this.masked.rawInputValue;\n    const offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection, {\n      input: true,\n      raw: true\n    }).offset;\n\n    // force align in remove direction only if no input chars were removed\n    // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n    const removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;\n    let cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\n    if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);\n    this.updateControl(cursorPos);\n    delete this._inputEvent;\n  }\n\n  /** Handles view change event and commits model value */\n  _onChange() {\n    if (this.displayValue !== this.el.value) this.updateValue();\n    this.masked.doCommit();\n    this.updateControl();\n    this._saveSelection();\n  }\n\n  /** Handles view drop event, prevents by default */\n  _onDrop(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  /** Restore last selection on focus */\n  _onFocus(ev) {\n    this.alignCursorFriendly();\n  }\n\n  /** Restore last selection on focus */\n  _onClick(ev) {\n    this.alignCursorFriendly();\n  }\n  _onUndo() {\n    this._applyHistoryState(this.history.undo());\n  }\n  _onRedo() {\n    this._applyHistoryState(this.history.redo());\n  }\n  _applyHistoryState(state) {\n    if (!state) return;\n    this._historyChanging = true;\n    this.unmaskedValue = state.unmaskedValue;\n    this.el.select(state.selection.start, state.selection.end);\n    this._saveSelection();\n    this._historyChanging = false;\n  }\n\n  /** Unbind view events and removes element reference */\n  destroy() {\n    this._unbindEvents();\n    this._listeners.length = 0;\n    delete this.el;\n  }\n}\nIMask.InputMask = InputMask;\n\nexport { InputMask as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}