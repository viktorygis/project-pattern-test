{"ast":null,"code":"const pageWidth = 595;\nfunction createCenteredLine(lineWidth = 180, yPosition = 0) {\n  return {\n    canvas: [{\n      type: \"rect\",\n      x: (pageWidth - lineWidth) / 2,\n      y: yPosition,\n      w: lineWidth,\n      h: 1,\n      color: \"#ff008a\"\n    }],\n    margin: [0, 0, 0, 20],\n    relativePosition: {\n      x: -50,\n      y: 0\n    }\n  };\n}\nfunction getSubcategoryPatternStats(patternResults, subcategory) {\n  const patternNames = (subcategory.patterns || []).map(p => {\n    var _p$pattern, _p$pattern2;\n    return (((_p$pattern = p.pattern) === null || _p$pattern === void 0 ? void 0 : _p$pattern.ru) || ((_p$pattern2 = p.pattern) === null || _p$pattern2 === void 0 ? void 0 : _p$pattern2.en) || \"\").trim().toLowerCase();\n  });\n  const counts = {};\n  let total = 0;\n  (patternResults || []).forEach(pat => {\n    const patNorm = (pat || \"\").trim().toLowerCase();\n    if (patternNames.includes(patNorm)) {\n      counts[patNorm] = (counts[patNorm] || 0) + 1;\n      total++;\n    }\n  });\n  const stats = {};\n  patternNames.forEach(name => {\n    stats[name] = total > 0 ? Math.round((counts[name] || 0) / total * 100) : 0;\n  });\n  return stats;\n}\n//Статус паттерна в подкатегории\nfunction getScaleStatus(stats, patterns) {\n  const percents = patterns.map(p => {\n    var _p$pattern3, _p$pattern4;\n    return stats[(((_p$pattern3 = p.pattern) === null || _p$pattern3 === void 0 ? void 0 : _p$pattern3.ru) || ((_p$pattern4 = p.pattern) === null || _p$pattern4 === void 0 ? void 0 : _p$pattern4.en) || \"\").trim().toLowerCase()] || 0;\n  });\n  const maxIndex = percents.findIndex(percent => percent >= 75);\n  if (maxIndex !== -1) {\n    var _patterns$maxIndex$pa, _patterns$maxIndex$pa2;\n    const name = ((_patterns$maxIndex$pa = patterns[maxIndex].pattern) === null || _patterns$maxIndex$pa === void 0 ? void 0 : _patterns$maxIndex$pa.ru) || ((_patterns$maxIndex$pa2 = patterns[maxIndex].pattern) === null || _patterns$maxIndex$pa2 === void 0 ? void 0 : _patterns$maxIndex$pa2.en);\n    return `ЯВНО ${name.toUpperCase()}`;\n  }\n  const medIndex = percents.findIndex(percent => percent > 50);\n  if (medIndex !== -1) {\n    var _patterns$medIndex$pa, _patterns$medIndex$pa2;\n    const name = ((_patterns$medIndex$pa = patterns[medIndex].pattern) === null || _patterns$medIndex$pa === void 0 ? void 0 : _patterns$medIndex$pa.ru) || ((_patterns$medIndex$pa2 = patterns[medIndex].pattern) === null || _patterns$medIndex$pa2 === void 0 ? void 0 : _patterns$medIndex$pa2.en);\n    return `УМЕРЕННО ${name.toUpperCase()}`;\n  }\n  return \"НЕЙТРАЛЬНО\";\n}\nfunction patternBar(percent, color, width = 240, height = 8) {\n  return {\n    canvas: [{\n      type: \"rect\",\n      x: 0,\n      y: 0,\n      w: width,\n      h: height,\n      color: \"#e0e0e0\",\n      r: 3\n    }, {\n      type: \"rect\",\n      x: 0,\n      y: 0,\n      w: Math.round(percent / 100 * width),\n      h: height,\n      color: color,\n      r: 3\n    }],\n    margin: [0, 2, 0, 5],\n    height,\n    width\n  };\n}\nexport function pdfCategoryPatternsBlock(categories = [], patternResults = []) {\n  if (!Array.isArray(categories)) {\n    categories = Object.values(categories || {});\n  }\n  const content = [{\n    text: \"Паттерны\",\n    style: \"categoryTitle\"\n  }, createCenteredLine(300, 0), {\n    text: \"\",\n    margin: [0, 20, 0, 0]\n  }];\n  categories.forEach(cat => {\n    var _cat$title, _cat$title2, _cat$description, _cat$description2;\n    //Название категории паттерна\n    const catTitle = ((_cat$title = cat.title) === null || _cat$title === void 0 ? void 0 : _cat$title.ru) || ((_cat$title2 = cat.title) === null || _cat$title2 === void 0 ? void 0 : _cat$title2.en) || cat.name || \"\";\n\n    //Описание категории паттерна\n    const catDescription = ((_cat$description = cat.description) === null || _cat$description === void 0 ? void 0 : _cat$description.ru) || ((_cat$description2 = cat.description) === null || _cat$description2 === void 0 ? void 0 : _cat$description2.en) || \"\";\n\n    // Название категории\n    content.push({\n      text: catTitle,\n      style: \"categoryHeader\",\n      margin: [0, 0, 0, 0]\n    });\n\n    // Описание категории\n    if (catDescription) {\n      content.push({\n        text: catDescription,\n        style: \"categoryDescription\"\n      });\n    }\n\n    // Разбиваем подкатегории на две колонки\n    const subcategories = cat.subcategories || [];\n    const leftSubs = subcategories.filter((_, i) => i % 2 === 0);\n    const rightSubs = subcategories.filter((_, i) => i % 2 === 1);\n    function renderSubcatBlock(subcat) {\n      var _subcat$title, _subcat$title2;\n      const subcatTitle = ((_subcat$title = subcat.title) === null || _subcat$title === void 0 ? void 0 : _subcat$title.ru) || ((_subcat$title2 = subcat.title) === null || _subcat$title2 === void 0 ? void 0 : _subcat$title2.en) || subcat.name || \"\";\n      const patterns = subcat.patterns || [];\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\n      const block = [\n      //Название подкатегории\n      {\n        text: subcatTitle,\n        style: \"subCategoryHeader\"\n      },\n      //Статус паттерна в подкатегории\n      {\n        text: getScaleStatus(stats, patterns),\n        style: \"statusPattern\"\n      }, ...patterns.map(pat => {\n        var _pat$pattern, _pat$pattern2;\n        const name = ((_pat$pattern = pat.pattern) === null || _pat$pattern === void 0 ? void 0 : _pat$pattern.ru) || ((_pat$pattern2 = pat.pattern) === null || _pat$pattern2 === void 0 ? void 0 : _pat$pattern2.en) || \"\";\n        const percent = stats[(name || \"\").trim().toLowerCase()] || 0;\n        const color = cat.color || \"#71717a\";\n        return {\n          stack: [\n          //Название паттерна и % выроженности паттерна\n          {\n            columns: [\n            //Название паттерна\n            {\n              text: name,\n              style: \"percentageText\",\n              width: \"*\"\n            },\n            //% выроженности паттерна\n            {\n              text: `${percent}%`,\n              style: \"percentageCell\",\n              alignment: \"right\",\n              width: \"100\"\n            }],\n            columnGap: 8,\n            margin: [0, 0, 0, 0]\n          },\n          //patternBar\n          {\n            stack: [patternBar(percent, color)],\n            margin: [0, 0, 0, 4]\n          }],\n          margin: [0, 0, 0, 2]\n        };\n      }),\n      // --- ДОБАВЛЯЕМ ОТСТУП ПОСЛЕ ПОДКАТЕГОРИИ ---\n      {\n        text: \"\",\n        margin: [0, 0, 0, 24]\n      }];\n      return block;\n    }\n\n    // Формируем колонки\n    const leftStack = [];\n    leftSubs.forEach(subcat => leftStack.push(...renderSubcatBlock(subcat)));\n    const rightStack = [];\n    rightSubs.forEach(subcat => rightStack.push(...renderSubcatBlock(subcat)));\n    content.push({\n      columns: [{\n        width: \"50%\",\n        stack: leftStack\n      }, {\n        width: \"50%\",\n        stack: rightStack\n      }],\n      columnGap: 24,\n      margin: [0, 0, 0, 0]\n    });\n\n    // --- ДОБАВЛЯЕМ РАЗРЫВ МЕЖДУ КАТЕГОРИЯМИ ---\n    content.push({\n      text: \"\",\n      pageBreak: \"after\"\n    });\n  });\n  return content;\n}","map":{"version":3,"names":["pageWidth","createCenteredLine","lineWidth","yPosition","canvas","type","x","y","w","h","color","margin","relativePosition","getSubcategoryPatternStats","patternResults","subcategory","patternNames","patterns","map","p","_p$pattern","_p$pattern2","pattern","ru","en","trim","toLowerCase","counts","total","forEach","pat","patNorm","includes","stats","name","Math","round","getScaleStatus","percents","_p$pattern3","_p$pattern4","maxIndex","findIndex","percent","_patterns$maxIndex$pa","_patterns$maxIndex$pa2","toUpperCase","medIndex","_patterns$medIndex$pa","_patterns$medIndex$pa2","patternBar","width","height","r","pdfCategoryPatternsBlock","categories","Array","isArray","Object","values","content","text","style","cat","_cat$title","_cat$title2","_cat$description","_cat$description2","catTitle","title","catDescription","description","push","subcategories","leftSubs","filter","_","i","rightSubs","renderSubcatBlock","subcat","_subcat$title","_subcat$title2","subcatTitle","block","_pat$pattern","_pat$pattern2","stack","columns","alignment","columnGap","leftStack","rightStack","pageBreak"],"sources":["F:/web/ЗАКАЗЫ/АЙФОРДЖИ/project-pattern-test/project-root/frontend/src/utils/pdf/pdfCategoryPatternsBlock.js"],"sourcesContent":["const pageWidth = 595;\r\n\r\nfunction createCenteredLine(lineWidth = 180, yPosition = 0) {\r\n  return {\r\n    canvas: [\r\n      {\r\n        type: \"rect\",\r\n        x: (pageWidth - lineWidth) / 2,\r\n        y: yPosition,\r\n        w: lineWidth,\r\n        h: 1,\r\n        color: \"#ff008a\",\r\n      },\r\n    ],\r\n    margin: [0, 0, 0, 20],\r\n    relativePosition: { x: -50, y: 0 },\r\n  };\r\n}\r\n\r\nfunction getSubcategoryPatternStats(patternResults, subcategory) {\r\n  const patternNames = (subcategory.patterns || []).map((p) => (p.pattern?.ru || p.pattern?.en || \"\").trim().toLowerCase());\r\n  const counts = {};\r\n  let total = 0;\r\n  (patternResults || []).forEach((pat) => {\r\n    const patNorm = (pat || \"\").trim().toLowerCase();\r\n    if (patternNames.includes(patNorm)) {\r\n      counts[patNorm] = (counts[patNorm] || 0) + 1;\r\n      total++;\r\n    }\r\n  });\r\n  const stats = {};\r\n  patternNames.forEach((name) => {\r\n    stats[name] = total > 0 ? Math.round(((counts[name] || 0) / total) * 100) : 0;\r\n  });\r\n  return stats;\r\n}\r\n//Статус паттерна в подкатегории\r\nfunction getScaleStatus(stats, patterns) {\r\n  const percents = patterns.map((p) => stats[(p.pattern?.ru || p.pattern?.en || \"\").trim().toLowerCase()] || 0);\r\n  const maxIndex = percents.findIndex((percent) => percent >= 75);\r\n  if (maxIndex !== -1) {\r\n    const name = patterns[maxIndex].pattern?.ru || patterns[maxIndex].pattern?.en;\r\n    return `ЯВНО ${name.toUpperCase()}`;\r\n  }\r\n  const medIndex = percents.findIndex((percent) => percent > 50);\r\n  if (medIndex !== -1) {\r\n    const name = patterns[medIndex].pattern?.ru || patterns[medIndex].pattern?.en;\r\n    return `УМЕРЕННО ${name.toUpperCase()}`;\r\n  }\r\n  return \"НЕЙТРАЛЬНО\";\r\n}\r\n\r\nfunction patternBar(percent, color, width = 240, height = 8) {\r\n  return {\r\n    canvas: [\r\n      {\r\n        type: \"rect\",\r\n        x: 0,\r\n        y: 0,\r\n        w: width,\r\n        h: height,\r\n        color: \"#e0e0e0\",\r\n        r: 3,\r\n      },\r\n      {\r\n        type: \"rect\",\r\n        x: 0,\r\n        y: 0,\r\n        w: Math.round((percent / 100) * width),\r\n        h: height,\r\n        color: color,\r\n        r: 3,\r\n      },\r\n    ],\r\n    margin: [0, 2, 0, 5],\r\n    height,\r\n    width,\r\n  };\r\n}\r\n\r\nexport function pdfCategoryPatternsBlock(categories = [], patternResults = []) {\r\n  if (!Array.isArray(categories)) {\r\n    categories = Object.values(categories || {});\r\n  }\r\n\r\n  const content = [{ text: \"Паттерны\", style: \"categoryTitle\" }, createCenteredLine(300, 0), { text: \"\", margin: [0, 20, 0, 0] }];\r\n\r\n  categories.forEach((cat) => {\r\n    //Название категории паттерна\r\n    const catTitle = cat.title?.ru || cat.title?.en || cat.name || \"\";\r\n\r\n    //Описание категории паттерна\r\n    const catDescription = cat.description?.ru || cat.description?.en || \"\";\r\n\r\n    // Название категории\r\n    content.push({\r\n      text: catTitle,\r\n      style: \"categoryHeader\",\r\n      margin: [0, 0, 0, 0],\r\n    });\r\n\r\n    // Описание категории\r\n    if (catDescription) {\r\n      content.push({\r\n        text: catDescription,\r\n        style: \"categoryDescription\",\r\n      });\r\n    }\r\n\r\n    // Разбиваем подкатегории на две колонки\r\n    const subcategories = cat.subcategories || [];\r\n    const leftSubs = subcategories.filter((_, i) => i % 2 === 0);\r\n    const rightSubs = subcategories.filter((_, i) => i % 2 === 1);\r\n\r\n    function renderSubcatBlock(subcat) {\r\n      const subcatTitle = subcat.title?.ru || subcat.title?.en || subcat.name || \"\";\r\n      const patterns = subcat.patterns || [];\r\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\r\n\r\n      const block = [\r\n        //Название подкатегории\r\n        {\r\n          text: subcatTitle,\r\n          style: \"subCategoryHeader\",\r\n        },\r\n\r\n        //Статус паттерна в подкатегории\r\n        {\r\n          text: getScaleStatus(stats, patterns),\r\n          style: \"statusPattern\",\r\n        },\r\n        ...patterns.map((pat) => {\r\n          const name = pat.pattern?.ru || pat.pattern?.en || \"\";\r\n          const percent = stats[(name || \"\").trim().toLowerCase()] || 0;\r\n          const color = cat.color || \"#71717a\";\r\n          return {\r\n            stack: [\r\n              //Название паттерна и % выроженности паттерна\r\n              {\r\n                columns: [\r\n                  //Название паттерна\r\n                  { text: name, style: \"percentageText\", width: \"*\" },\r\n                  //% выроженности паттерна\r\n                  { text: `${percent}%`, style: \"percentageCell\", alignment: \"right\", width: \"100\" },\r\n                ],\r\n                columnGap: 8,\r\n                margin: [0, 0, 0, 0],\r\n              },\r\n              //patternBar\r\n              {\r\n                stack: [patternBar(percent, color)],\r\n                margin: [0, 0, 0, 4],\r\n              },\r\n            ],\r\n            margin: [0, 0, 0, 2],\r\n          };\r\n        }),\r\n        // --- ДОБАВЛЯЕМ ОТСТУП ПОСЛЕ ПОДКАТЕГОРИИ ---\r\n        { text: \"\", margin: [0, 0, 0, 24] },\r\n      ];\r\n      return block;\r\n    }\r\n\r\n    // Формируем колонки\r\n    const leftStack = [];\r\n    leftSubs.forEach((subcat) => leftStack.push(...renderSubcatBlock(subcat)));\r\n    const rightStack = [];\r\n    rightSubs.forEach((subcat) => rightStack.push(...renderSubcatBlock(subcat)));\r\n\r\n    content.push({\r\n      columns: [\r\n        { width: \"50%\", stack: leftStack },\r\n        { width: \"50%\", stack: rightStack },\r\n      ],\r\n      columnGap: 24,\r\n      margin: [0, 0, 0, 0],\r\n    });\r\n\r\n    // --- ДОБАВЛЯЕМ РАЗРЫВ МЕЖДУ КАТЕГОРИЯМИ ---\r\n    content.push({ text: \"\", pageBreak: \"after\" });\r\n  });\r\n\r\n  return content;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}