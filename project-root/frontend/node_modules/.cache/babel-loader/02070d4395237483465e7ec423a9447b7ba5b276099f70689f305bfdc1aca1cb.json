{"ast":null,"code":"//resultsHelpers.js\n\n// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ АНАЛИЗА РЕЗУЛЬТАТОВ ПАТТЕРНОВ\n\n// Возвращает статистику по паттерну для подкатегории\nexport function getSubcategoryPatternStats(patternResults, subcategory) {\n  const patternNames = (subcategory.patterns || []).map(p => (p.pattern.ru || p.pattern.en || \"\").trim().toLowerCase());\n  const counts = {};\n  let total = 0;\n  (patternResults || []).forEach(pat => {\n    const patNorm = (pat || \"\").trim().toLowerCase();\n    if (patternNames.includes(patNorm)) {\n      counts[patNorm] = (counts[patNorm] || 0) + 1;\n      total++;\n    }\n  });\n  const stats = {};\n  patternNames.forEach(name => {\n    stats[name] = total > 0 ? Math.round((counts[name] || 0) / total * 100) : 0;\n  });\n  return stats;\n}\n\n// Для гистограммы: собирает проценты по всем паттернам\nexport function getPatternPercentsByCategory(categories, patternResults) {\n  const percents = [];\n  (categories || []).forEach(cat => {\n    (cat.subcategories || []).forEach(subcat => {\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\n      (subcat.patterns || []).forEach(pat => {\n        var _pat$pattern, _pat$pattern2;\n        const name = (((_pat$pattern = pat.pattern) === null || _pat$pattern === void 0 ? void 0 : _pat$pattern.ru) || ((_pat$pattern2 = pat.pattern) === null || _pat$pattern2 === void 0 ? void 0 : _pat$pattern2.en) || \"\").trim();\n        const key = name.toLowerCase();\n        if (stats[key] > 0) {\n          percents.push({\n            name,\n            percent: stats[key]\n          });\n        }\n      });\n    });\n  });\n  return percents;\n}\n\n// Возвращает топ-5 проявленных паттернов\nexport function getTopPatterns({\n  categories,\n  patternResults\n}) {\n  const percents = getPatternPercentsByCategory(categories, patternResults);\n  return percents.sort((a, b) => b.percent - a.percent).slice(0, 5).map(p => p.name);\n}\n\n// Возвращает топовую категорию (где суммарно больше всего проявленность)\nexport function getTopCategory({\n  categories,\n  patternResults\n}) {\n  let maxCategory = \"\";\n  let maxValue = 0;\n  (categories || []).forEach(cat => {\n    let sum = 0;\n    let total = 0;\n    (cat.subcategories || []).forEach(subcat => {\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\n      (subcat.patterns || []).forEach(pat => {\n        var _pat$pattern3, _pat$pattern4;\n        const name = (((_pat$pattern3 = pat.pattern) === null || _pat$pattern3 === void 0 ? void 0 : _pat$pattern3.ru) || ((_pat$pattern4 = pat.pattern) === null || _pat$pattern4 === void 0 ? void 0 : _pat$pattern4.en) || \"\").trim().toLowerCase();\n        sum += stats[name] || 0;\n        total++;\n      });\n    });\n    const avg = total ? sum / total : 0;\n    if (avg > maxValue) {\n      var _cat$title, _cat$title2;\n      maxValue = avg;\n      maxCategory = ((_cat$title = cat.title) === null || _cat$title === void 0 ? void 0 : _cat$title.ru) || ((_cat$title2 = cat.title) === null || _cat$title2 === void 0 ? void 0 : _cat$title2.en) || \"\";\n    }\n  });\n  return maxCategory;\n}\n\n// Возвращает текст-интерпретацию (можно доработать под свой текст)\nexport function getPatternMessage({\n  topCategory\n}) {\n  if (topCategory === \"Паттерны времени\") {\n    return \"Вы ориентированы на эффективное управление своим временем и ресурсами.\";\n  }\n  if (topCategory === \"Паттерны поведения\") {\n    return \"Ваши поведенческие стратегии формируют основу вашей активности.\";\n  }\n  if (topCategory === \"Паттерны коммуникации\") {\n    return \"Ваша сильная сторона — коммуникация и взаимодействие с окружающими.\";\n  }\n  if (topCategory === \"Паттерны мышления\") {\n    return \"Ваша особенность — оригинальность мышления и подходов к решению задач.\";\n  }\n  return \"У вас проявлен комплексный профиль паттернов.\";\n}\n\n// Возможности и ограничения — пример (можно расширить)\nexport function getOpportunities({\n  topCategory\n}) {\n  if (topCategory) {\n    return `Ваши сильные стороны проявляются в категории: ${topCategory}. Используйте их для развития!`;\n  }\n  return \"\";\n}\n\n// Модель поведения — пример\nexport function getBehaviorModel({\n  topPatterns\n}) {\n  if (Array.isArray(topPatterns) && topPatterns.length > 0) {\n    return `Ваш стиль поведения базируется на паттернах: ${topPatterns.slice(0, 3).join(\", \")}.`;\n  }\n  return \"\";\n}\n\n// Сильные стороны — пример\nexport function getStrengths({\n  topPatterns\n}) {\n  if (Array.isArray(topPatterns) && topPatterns.length > 0) {\n    return `Ведущие паттерны: ${topPatterns.join(\", \")} — это ваши ресурсы для развития.`;\n  }\n  return \"\";\n}\n\n// Главная сборка всех данных для ResultsScreen\nexport function createResultsData({\n  userData,\n  categories,\n  patternResults\n}) {\n  const topPatterns = getTopPatterns({\n    categories,\n    patternResults\n  });\n  const topCategory = getTopCategory({\n    categories,\n    patternResults\n  });\n  const patternMessage = getPatternMessage({\n    topCategory\n  });\n  const opportunities = getOpportunities({\n    topCategory\n  });\n  const behaviorModel = getBehaviorModel({\n    topPatterns\n  });\n  const strengths = getStrengths({\n    topPatterns\n  });\n  return {\n    userData,\n    categories,\n    patternResults,\n    topPatterns,\n    topCategory,\n    patternMessage,\n    opportunities,\n    behaviorModel,\n    strengths,\n    user: userData,\n    date: new Date().toLocaleDateString(\"ru-RU\")\n  };\n}","map":{"version":3,"names":["getSubcategoryPatternStats","patternResults","subcategory","patternNames","patterns","map","p","pattern","ru","en","trim","toLowerCase","counts","total","forEach","pat","patNorm","includes","stats","name","Math","round","getPatternPercentsByCategory","categories","percents","cat","subcategories","subcat","_pat$pattern","_pat$pattern2","key","push","percent","getTopPatterns","sort","a","b","slice","getTopCategory","maxCategory","maxValue","sum","_pat$pattern3","_pat$pattern4","avg","_cat$title","_cat$title2","title","getPatternMessage","topCategory","getOpportunities","getBehaviorModel","topPatterns","Array","isArray","length","join","getStrengths","createResultsData","userData","patternMessage","opportunities","behaviorModel","strengths","user","date","Date","toLocaleDateString"],"sources":["F:/web/ЗАКАЗЫ/АЙФОРДЖИ/project-pattern-test/project-root/frontend/src/utils/resultsHelpers.js"],"sourcesContent":["//resultsHelpers.js\r\n\r\n// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ АНАЛИЗА РЕЗУЛЬТАТОВ ПАТТЕРНОВ\r\n\r\n// Возвращает статистику по паттерну для подкатегории\r\nexport function getSubcategoryPatternStats(patternResults, subcategory) {\r\n  const patternNames = (subcategory.patterns || []).map((p) => (p.pattern.ru || p.pattern.en || \"\").trim().toLowerCase());\r\n  const counts = {};\r\n  let total = 0;\r\n  (patternResults || []).forEach((pat) => {\r\n    const patNorm = (pat || \"\").trim().toLowerCase();\r\n    if (patternNames.includes(patNorm)) {\r\n      counts[patNorm] = (counts[patNorm] || 0) + 1;\r\n      total++;\r\n    }\r\n  });\r\n  const stats = {};\r\n  patternNames.forEach((name) => {\r\n    stats[name] = total > 0 ? Math.round(((counts[name] || 0) / total) * 100) : 0;\r\n  });\r\n  return stats;\r\n}\r\n\r\n// Для гистограммы: собирает проценты по всем паттернам\r\nexport function getPatternPercentsByCategory(categories, patternResults) {\r\n  const percents = [];\r\n  (categories || []).forEach((cat) => {\r\n    (cat.subcategories || []).forEach((subcat) => {\r\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\r\n      (subcat.patterns || []).forEach((pat) => {\r\n        const name = (pat.pattern?.ru || pat.pattern?.en || \"\").trim();\r\n        const key = name.toLowerCase();\r\n        if (stats[key] > 0) {\r\n          percents.push({ name, percent: stats[key] });\r\n        }\r\n      });\r\n    });\r\n  });\r\n  return percents;\r\n}\r\n\r\n// Возвращает топ-5 проявленных паттернов\r\nexport function getTopPatterns({ categories, patternResults }) {\r\n  const percents = getPatternPercentsByCategory(categories, patternResults);\r\n  return percents\r\n    .sort((a, b) => b.percent - a.percent)\r\n    .slice(0, 5)\r\n    .map((p) => p.name);\r\n}\r\n\r\n// Возвращает топовую категорию (где суммарно больше всего проявленность)\r\nexport function getTopCategory({ categories, patternResults }) {\r\n  let maxCategory = \"\";\r\n  let maxValue = 0;\r\n  (categories || []).forEach((cat) => {\r\n    let sum = 0;\r\n    let total = 0;\r\n    (cat.subcategories || []).forEach((subcat) => {\r\n      const stats = getSubcategoryPatternStats(patternResults, subcat);\r\n      (subcat.patterns || []).forEach((pat) => {\r\n        const name = (pat.pattern?.ru || pat.pattern?.en || \"\").trim().toLowerCase();\r\n        sum += stats[name] || 0;\r\n        total++;\r\n      });\r\n    });\r\n    const avg = total ? sum / total : 0;\r\n    if (avg > maxValue) {\r\n      maxValue = avg;\r\n      maxCategory = cat.title?.ru || cat.title?.en || \"\";\r\n    }\r\n  });\r\n  return maxCategory;\r\n}\r\n\r\n// Возвращает текст-интерпретацию (можно доработать под свой текст)\r\nexport function getPatternMessage({ topCategory }) {\r\n  if (topCategory === \"Паттерны времени\") {\r\n    return \"Вы ориентированы на эффективное управление своим временем и ресурсами.\";\r\n  }\r\n  if (topCategory === \"Паттерны поведения\") {\r\n    return \"Ваши поведенческие стратегии формируют основу вашей активности.\";\r\n  }\r\n  if (topCategory === \"Паттерны коммуникации\") {\r\n    return \"Ваша сильная сторона — коммуникация и взаимодействие с окружающими.\";\r\n  }\r\n  if (topCategory === \"Паттерны мышления\") {\r\n    return \"Ваша особенность — оригинальность мышления и подходов к решению задач.\";\r\n  }\r\n  return \"У вас проявлен комплексный профиль паттернов.\";\r\n}\r\n\r\n// Возможности и ограничения — пример (можно расширить)\r\nexport function getOpportunities({ topCategory }) {\r\n  if (topCategory) {\r\n    return `Ваши сильные стороны проявляются в категории: ${topCategory}. Используйте их для развития!`;\r\n  }\r\n  return \"\";\r\n}\r\n\r\n// Модель поведения — пример\r\nexport function getBehaviorModel({ topPatterns }) {\r\n  if (Array.isArray(topPatterns) && topPatterns.length > 0) {\r\n    return `Ваш стиль поведения базируется на паттернах: ${topPatterns.slice(0, 3).join(\", \")}.`;\r\n  }\r\n  return \"\";\r\n}\r\n\r\n// Сильные стороны — пример\r\nexport function getStrengths({ topPatterns }) {\r\n  if (Array.isArray(topPatterns) && topPatterns.length > 0) {\r\n    return `Ведущие паттерны: ${topPatterns.join(\", \")} — это ваши ресурсы для развития.`;\r\n  }\r\n  return \"\";\r\n}\r\n\r\n// Главная сборка всех данных для ResultsScreen\r\nexport function createResultsData({ userData, categories, patternResults }) {\r\n  const topPatterns = getTopPatterns({ categories, patternResults });\r\n  const topCategory = getTopCategory({ categories, patternResults });\r\n  const patternMessage = getPatternMessage({ topCategory });\r\n  const opportunities = getOpportunities({ topCategory });\r\n  const behaviorModel = getBehaviorModel({ topPatterns });\r\n  const strengths = getStrengths({ topPatterns });\r\n\r\n  return {\r\n    userData,\r\n    categories,\r\n    patternResults,\r\n    topPatterns,\r\n    topCategory,\r\n    patternMessage,\r\n    opportunities,\r\n    behaviorModel,\r\n    strengths,\r\n    user: userData,\r\n    date: new Date().toLocaleDateString(\"ru-RU\"),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}