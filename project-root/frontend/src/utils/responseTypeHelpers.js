// Словарь соответствия паттернов типу реагирования
// Ключ - паттерн (ru), значение - тип реагирования
export const patternToResponseType = {
	// Ориентация во времени
	"Дефицит времени": "Моноактивный",
	Будущее: "Моноактивный",
	Монохронность: "Моноактивный",
	"Долгосрочная мотивация": "Моноактивный",

	Настоящее: "Мультиактивный",
	Полихронность: "Мультиактивный",
	"Краткосрочная мотивация": "Мультиактивный",

	"Изобилие времени": "Реактивный",
	Прошлое: "Реактивный",

	// Поведение
	Делать: "Моноактивный",
	Конкуренция: "Моноактивный",
	"Защищать границы": "Моноактивный",
	Контроль: "Моноактивный",

	Изменения: "Мультиактивный",
	Сотрудничество: "Мультиактивный",
	"Делиться ресурсами": "Мультиактивный",

	Быть: "Реактивный",
	Стабильность: "Реактивный",
	Сотрудничество: "Реактивный",
	"Защищать границы": "Реактивный",

	// Мышление
	"Дедуктивное мышление": "Моноактивный",
	"Аналитичное мышление": "Моноактивный",
	"Системное мышление": "Моноактивный",
	Процедурность: "Моноактивный",

	"Аналитичное мышление": "Мультиактивный",
	Полезависимость: "Мультиактивный",
	Импульсивность: "Мультиактивный",

	"Индуктивное мышление": "Реактивный",
	Рефлексивность: "Реактивный",

	// Коммуникация
	"Низкий контекст": "Моноактивный",
	"Прямая коммуникация": "Моноактивный",
	Нейтральность: "Моноактивный",
	Формальность: "Моноактивный",

	"Высокий контекст": "Мультиактивный",
	"Прямая коммуникация": "Мультиактивный",
	Эмоциональность: "Мультиактивный",
	Неформальность: "Мультиактивный",

	"Низкий контекст": "Реактивный",
	"Непрямая коммуникация": "Реактивный",
	Нейтральность: "Реактивный",

	// Мотивация
	Контроль: "Моноактивный",

	Интерес: "Мультиактивный",
	Изменения: "Мультиактивный",

	Гармония: "Реактивный",
	"Принятие реальности": "Реактивный",

	// Социальность
	Индивидуализм: "Моноактивный",
	Ответственность: "Моноактивный",
	Конкуренция: "Моноактивный",

	Сотрудничество: "Мультиактивный",

	Коллективизм: "Реактивный",
	Сотрудничество: "Реактивный",
};

// Универсальный алгоритм для определения типа реагирования
export function determineResponseType(userPatterns) {
	// userPatterns — массив строк (паттерны на русском)
	const counter = {
		Моноактивный: 0,
		Мультиактивный: 0,
		Реактивный: 0,
	};

	userPatterns.forEach((pattern) => {
		const type = patternToResponseType[pattern.trim()];
		if (type) counter[type]++;
	});

	// Определяем максимальный
	const max = Math.max(...Object.values(counter));
	const topTypes = Object.entries(counter)
		.filter(([_, count]) => count === max && count > 0)
		.map(([type]) => type);

	// Если один тип явно выражен — возвращаем его, иначе "Смешанный"
	return topTypes.length === 1 ? topTypes[0] : max === 0 ? "Не определён" : "Смешанный";
}
